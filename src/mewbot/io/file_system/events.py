from typing import Union, Optional

import dataclasses

import aiopath  # type: ignore
import watchfiles
from watchdog.events import FileSystemEvent  # type: ignore

from mewbot.api.v1 import InputEvent, OutputEvent


@dataclasses.dataclass
class FSInputEvent(InputEvent):
    """
    Base class for generic input events generated by the file system.
    """

    # equivalent to FileSystemEvent, tuple[watchfiles.Change, str], None]
    base_event: Optional[Union[FileSystemEvent, tuple[watchfiles.Change, str]]]


@dataclasses.dataclass
class FileFSInputEvent(FSInputEvent):
    """
    Base class for file related input events generated by the file system.
    """

    file_path: str
    file_async_path: aiopath.AsyncPath


#
# --------------------------------------
# - INPUT - FILE TYPE
# --------------------------------------
#


@dataclasses.dataclass
class CreatedFileFSInputEvent(FileFSInputEvent):
    """
    Called when a file is created - either at the location which is being monitored or inside a dir
    which is being monitored.
    """

    # file_size: str
    # entire_file: str
    # file_read_mode: str


@dataclasses.dataclass
class UpdatedFileFSInputEvent(FileFSInputEvent):
    """
    Called when a file is updated - either at the location which is being monitored or inside a dir
    which is being monitored.
    """

    # file_size: str
    # entire_file: str
    # file_read_mode: str


@dataclasses.dataclass
class MovedFileFSInputEvent(FileFSInputEvent):
    """
    Called when a file is updated - either at the location which is being monitored or inside a dir
    which is being monitored.
    """

    file_src: str

    # file_size: str
    # entire_file: str
    # file_read_mode: str


@dataclasses.dataclass
class DeletedFileFSInputEvent(FileFSInputEvent):
    """
    Called when a file is created - either at the location which is being monitored or inside a dir
    which is being monitored.
    Cannot provide any more information without caching a lot of details about the FS.
    """


@dataclasses.dataclass
class InputFileFileCreationInputEvent(FSInputEvent):
    """
    Event called when a file comes into existence at the monitored location - the input location.
    Note - the input cannot destinguish between a file being created or moved to the input location.
    """

    file_path: str
    file_async_path: aiopath.AsyncPath


@dataclasses.dataclass
class InputFileFileDeletionInputEvent(FSInputEvent):
    """
    Event called when a file is removed from the monitored location - the input location.
    Note - the input cannot distinguish between a file being deleted or moved away from the input
    location.
    """

    file_path: str
    file_async_path: aiopath.AsyncPath


#
# --------------------------------------
# - INPUT - DIR TYPE
# --------------------------------------
#


@dataclasses.dataclass
class DirFSInputEvent(FSInputEvent):
    """
    Base class for file related input events generated by the file system.
    """

    dir_path: str
    dir_async_path: aiopath.AsyncPath


@dataclasses.dataclass
class CreatedDirFSInputEvent(DirFSInputEvent):
    """
    A dir has been created - either in the dir we're monitoring - if we're monitoring one.
    Or at the given monitor location.
    """


@dataclasses.dataclass
class UpdatedDirFSInputEvent(DirFSInputEvent):
    """
    A dir has been updated - either in the dir we're monitoring - if we're monitoring one.
    What this mostly means is the name of the dir has been updated.
    If the contents have been updated, it'll spew events of the appropriate type.
    """


@dataclasses.dataclass
class MovedDirFSInputEvent(DirFSInputEvent):
    """
    A dir has been updated - either in the dir we're monitoring - if we're monitoring one.
    What this mostly means is the name of the dir has been updated.
    If the contents have been updated, it'll spew events of the appropriate type.
    """

    dir_src_path: str
    dir_src_async_path: aiopath.AsyncPath
    # dir_path and dir_async_path are where the dir CURRENTLY IS


@dataclasses.dataclass
class DeletedDirFSInputEvent(DirFSInputEvent):
    """
    A dir has been deleted - either in the dir we're monitoring - if we're monitoring one.
    """


@dataclasses.dataclass
class InputFileDirCreationInputEvent(FSInputEvent):
    """
    Event called when a dir comes into existence at the monitored location - the input location.
    Note - the input cannot distinguish between a dir being created or moved to the input location.
    """

    dir_path: str
    dir_async_path: aiopath.AsyncPath


@dataclasses.dataclass
class InputFileDirDeletionInputEvent(FSInputEvent):
    """
    Event called when a dir is removed from the monitored location - the input location.
    Note - the input cannot distinguish between a dir being deleted or moved away from the input
    location.
    """

    dir_path: str
    dir_async_path: aiopath.AsyncPath


#
# --------------------------------------
# - OUTPUT
# --------------------------------------
#


@dataclasses.dataclass
class FSOutputEvent(OutputEvent):
    """
    Base class for generic input events generated by the file system.
    """


@dataclasses.dataclass
class FileFSOutputEvent(FSOutputEvent):
    """
    Base class for generic input events generated by the file system.
    """

    file_name: str


@dataclasses.dataclass
class CreateFileFSOutputEvent(FileFSOutputEvent):
    """
    Creates a file with the given name.
    For security (and sanity) currently only created files in the designated output folder.
    """

    file_contents: str
    is_binary: bool = False


@dataclasses.dataclass
class AppendFileFSOutputEvent(FileFSOutputEvent):
    """
    Creates a file with the given name.
    For security (and sanity) currently only created files in the designated output folder.
    """

    file_contents: str
    is_binary: bool = False


@dataclasses.dataclass
class OverwriteFileFSOutputEvent(FileFSOutputEvent):
    """
    Creates a file with the given name.
    For security (and sanity) currently only created files in the designated output folder.
    """

    file_contents: str
    is_binary: bool = False


@dataclasses.dataclass
class DeleteFileFSOutputEvent(FileFSOutputEvent):
    """
    Creates a file with the given name.
    For security (and sanity) currently only created files in the designated output folder.
    """
